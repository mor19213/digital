$date
	Sat Nov  7 18:07:45 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 1 ! z $end
$var wire 4 " out [0:3] $end
$var wire 1 # c $end
$var reg 3 $ Sel [0:2] $end
$var reg 1 % accu_en $end
$var reg 1 & bus1_en $end
$var reg 1 ' bus2_en $end
$var reg 1 ( clk $end
$var reg 4 ) in_bus1 [0:3] $end
$var reg 1 * reset $end
$scope module i_ejercicio2 $end
$var wire 3 + Sel [0:2] $end
$var wire 1 % accu_en $end
$var wire 1 & bus1_en $end
$var wire 1 ' bus2_en $end
$var wire 1 ( clk $end
$var wire 4 , in_bus1 [0:3] $end
$var wire 4 - out [0:3] $end
$var wire 1 * reset $end
$var wire 1 ! z $end
$var wire 4 . y [0:3] $end
$var wire 4 / out_bus1 [0:3] $end
$var wire 4 0 out_alu [0:3] $end
$var wire 4 1 out_accu [0:3] $end
$var wire 1 # c $end
$scope module i_accumulator $end
$var wire 1 ( clk $end
$var wire 1 % enable $end
$var wire 1 * reset $end
$var wire 4 2 in_alu [0:3] $end
$var wire 4 3 accu [0:3] $end
$scope module i_flipflopD1 $end
$var wire 1 ( CLK $end
$var wire 1 4 D $end
$var wire 1 % enable $end
$var wire 1 * reset $end
$var reg 1 5 Q $end
$upscope $end
$scope module i_flipflopD2 $end
$var wire 1 ( CLK $end
$var wire 1 6 D $end
$var wire 1 % enable $end
$var wire 1 * reset $end
$var reg 1 7 Q $end
$upscope $end
$scope module i_flipflopD3 $end
$var wire 1 ( CLK $end
$var wire 1 8 D $end
$var wire 1 % enable $end
$var wire 1 * reset $end
$var reg 1 9 Q $end
$upscope $end
$scope module i_flipflopD4 $end
$var wire 1 ( CLK $end
$var wire 1 : D $end
$var wire 1 % enable $end
$var wire 1 * reset $end
$var reg 1 ; Q $end
$upscope $end
$upscope $end
$scope module i_alu $end
$var wire 3 < Sel [0:2] $end
$var wire 4 = a [0:3] $end
$var wire 1 ! z $end
$var wire 4 > b [0:3] $end
$var reg 1 # c $end
$var reg 4 ? out [0:3] $end
$var reg 5 @ out1 [0:4] $end
$upscope $end
$scope module i_tristate_buffer1 $end
$var wire 4 A a [0:3] $end
$var wire 1 & enable $end
$var wire 4 B y [0:3] $end
$upscope $end
$scope module i_tristate_buffer2 $end
$var wire 4 C a [0:3] $end
$var wire 1 ' enable $end
$var wire 4 D y [0:3] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
x;
x:
x9
x8
x7
x6
x5
x4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
x*
bx )
0(
x'
x&
x%
bx $
x#
bx "
x!
$end
#1
1(
#2
0(
#3
0!
b1 "
b1 -
b1 .
b1 D
1:
08
06
04
0#
b1 0
b1 2
b1 ?
b1 C
b1 @
0;
09
07
b0 1
b0 3
b0 =
05
1(
b1 /
b1 >
b1 B
b1 )
b1 ,
b1 A
b11 $
b11 +
b11 <
1'
1&
1%
1*
#4
0(
0*
#5
b10 "
b10 -
b10 .
b10 D
0:
18
b10 0
b10 2
b10 ?
b10 C
b10 @
b1 1
b1 3
b1 =
1;
1(
#6
0(
#7
b11 "
b11 -
b11 .
b11 D
1:
b11 0
b11 2
b11 ?
b11 C
b11 @
19
b10 1
b10 3
b10 =
0;
1(
#8
0(
#9
b100 "
b100 -
b100 .
b100 D
0:
08
16
b100 0
b100 2
b100 ?
b100 C
b100 @
b11 1
b11 3
b11 =
1;
1(
#10
0(
#11
b101 "
b101 -
b101 .
b101 D
1:
b101 0
b101 2
b101 ?
b101 C
b101 @
17
09
b100 1
b100 3
b100 =
0;
1(
#12
0(
b11 "
b11 -
b11 .
b11 D
18
06
b11 0
b11 2
b11 ?
b11 C
b11 @
b1 $
b1 +
b1 <
#13
b10 "
b10 -
b10 .
b10 D
0:
b10 0
b10 2
b10 ?
b10 C
b10 @
1;
19
b11 1
b11 3
b11 =
07
1(
#14
0(
#15
0!
b1 "
b1 -
b1 .
b1 D
1:
08
b1 0
b1 2
b1 ?
b1 C
b1 @
b10 1
b10 3
b10 =
0;
1(
#16
0(
#17
1!
b0 "
b0 -
b0 .
b0 D
0:
b0 0
b0 2
b0 ?
b0 C
b0 @
1;
b1 1
b1 3
b1 =
09
1(
#18
0(
0!
b1 "
b1 -
b1 .
b1 D
1:
b1 0
b1 2
b1 ?
b1 C
b1 @
b0 $
b0 +
b0 <
#19
1(
#20
0(
#21
1(
#22
0(
b10 $
b10 +
b10 <
#23
1(
#24
0(
#25
1(
#26
0(
b1110 "
b1110 -
b1110 .
b1110 D
0:
18
16
14
b1110 0
b1110 2
b1110 ?
b1110 C
b11110 @
b100 $
b100 +
b100 <
#27
b1111 "
b1111 -
b1111 .
b1111 D
1:
b1111 0
b1111 2
b1111 ?
b1111 C
b11111 @
15
17
19
b1110 1
b1110 3
b1110 =
0;
1(
#28
0(
#29
b1110 "
b1110 -
b1110 .
b1110 D
0:
b1110 0
b1110 2
b1110 ?
b1110 C
b11110 @
b1111 1
b1111 3
b1111 =
1;
1(
#30
0(
#31
b1111 "
b1111 -
b1111 .
b1111 D
1:
b1111 0
b1111 2
b1111 ?
b1111 C
b11111 @
b1110 1
b1110 3
b1110 =
0;
1(
#32
0(
bz "
bz -
bz .
bz D
0'
#33
0:
b1110 0
b1110 2
b1110 ?
b1110 C
b11110 @
b1111 1
b1111 3
b1111 =
1;
1(
#34
1:
b1111 0
b1111 2
b1111 ?
b1111 C
b11111 @
05
07
09
b0 1
b0 3
b0 =
0;
0(
1*
#35
1(
#36
0(
18
16
04
b111 /
b111 >
b111 B
b111 0
b111 2
b111 ?
b111 C
b111 @
b111 "
b111 -
b111 .
b111 D
b111 )
b111 ,
b111 A
b11 $
b11 +
b11 <
1'
#37
1(
#38
0(
0*
#39
b1110 "
b1110 -
b1110 .
b1110 D
0:
14
b1110 0
b1110 2
b1110 ?
b1110 C
b1110 @
1;
19
b111 1
b111 3
b111 =
17
1(
#40
0(
#41
b101 "
b101 -
b101 .
b101 D
1:
08
04
1#
b101 0
b101 2
b101 ?
b101 C
b10101 @
15
b1110 1
b1110 3
b1110 =
0;
1(
#42
0(
#43
b1100 "
b1100 -
b1100 .
b1100 D
0:
14
0#
b1100 0
b1100 2
b1100 ?
b1100 C
b1100 @
1;
09
b101 1
b101 3
b101 =
05
1(
#44
0(
b101 "
b101 -
b101 .
b101 D
1:
04
b101 0
b101 2
b101 ?
b101 C
b101 @
b0 $
b0 +
b0 <
#45
1(
#46
0(
#47
1(
#48
0(
bz /
bz >
bz B
0&
#49
1(
#50
0(
#51
1(
#52
0(
x!
bz "
bz -
bz .
bz D
z:
z8
z6
z4
bz 0
bz 2
bz ?
bz C
b0zzzz @
b10 $
b10 +
b10 <
#53
z5
z7
z9
bz 1
bz 3
bz =
z;
1(
#54
0(
#55
1(
#56
0(
bx "
bx -
bx .
bx D
x:
x8
x6
x4
bx 0
bx 2
bx ?
bx C
b1xxxx @
b100 $
b100 +
b100 <
#57
x5
x7
x9
bx 1
bx 3
bx =
x;
1(
#58
0(
#59
1(
#60
0(
#61
1(
#62
0(
#63
1(
#64
0(
#65
1(
