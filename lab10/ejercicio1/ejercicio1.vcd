$date
	Sat Nov  7 13:52:46 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 4 ! oprnd [0:3] $end
$var wire 4 " instr [0:3] $end
$var wire 8 # data [0:7] $end
$var reg 1 $ clk $end
$var reg 1 % fetch_en $end
$var reg 1 & load $end
$var reg 12 ' loadbits [0:11] $end
$var reg 1 ( pc_en $end
$var reg 1 ) reset $end
$scope module i_ejercicio1 $end
$var wire 1 $ clk $end
$var wire 1 % fetch_en $end
$var wire 1 & load $end
$var wire 12 * loadbits [0:11] $end
$var wire 1 ( pc_en $end
$var wire 1 ) reset $end
$var wire 4 + oprnd [0:3] $end
$var wire 4 , instr [0:3] $end
$var wire 8 - data [0:7] $end
$var wire 12 . address [0:11] $end
$scope module i_ROM $end
$var wire 8 / data [0:7] $end
$var wire 12 0 adress [0:11] $end
$upscope $end
$scope module i_flipflopD4 $end
$var wire 1 $ clk $end
$var wire 1 % enable $end
$var wire 8 1 prog_byte [0:7] $end
$var wire 1 ) reset $end
$var wire 4 2 oprnd [0:3] $end
$var wire 4 3 instr [0:3] $end
$scope module ff1 $end
$var wire 1 $ CLK $end
$var wire 1 4 D $end
$var wire 1 % enable $end
$var wire 1 ) reset $end
$var reg 1 5 Q $end
$upscope $end
$scope module ff2 $end
$var wire 1 $ CLK $end
$var wire 1 6 D $end
$var wire 1 % enable $end
$var wire 1 ) reset $end
$var reg 1 7 Q $end
$upscope $end
$scope module ff3 $end
$var wire 1 $ CLK $end
$var wire 1 8 D $end
$var wire 1 % enable $end
$var wire 1 ) reset $end
$var reg 1 9 Q $end
$upscope $end
$scope module ff4 $end
$var wire 1 $ CLK $end
$var wire 1 : D $end
$var wire 1 % enable $end
$var wire 1 ) reset $end
$var reg 1 ; Q $end
$upscope $end
$scope module ff5 $end
$var wire 1 $ CLK $end
$var wire 1 < D $end
$var wire 1 % enable $end
$var wire 1 ) reset $end
$var reg 1 = Q $end
$upscope $end
$scope module ff6 $end
$var wire 1 $ CLK $end
$var wire 1 > D $end
$var wire 1 % enable $end
$var wire 1 ) reset $end
$var reg 1 ? Q $end
$upscope $end
$scope module ff7 $end
$var wire 1 $ CLK $end
$var wire 1 @ D $end
$var wire 1 % enable $end
$var wire 1 ) reset $end
$var reg 1 A Q $end
$upscope $end
$scope module ff8 $end
$var wire 1 $ CLK $end
$var wire 1 B D $end
$var wire 1 % enable $end
$var wire 1 ) reset $end
$var reg 1 C Q $end
$upscope $end
$upscope $end
$scope module i_pc_counter $end
$var wire 1 $ clk $end
$var wire 1 ( enable $end
$var wire 1 & load $end
$var wire 12 D loadbits [0:11] $end
$var wire 1 ) reset $end
$var reg 12 E count [0:11] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx E
bx D
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
x)
x(
bx '
x&
x%
0$
bx #
bx "
bx !
$end
#1
1$
#2
04
06
08
0:
0<
0>
0@
0B
b0 #
b0 -
b0 /
b0 1
0C
0A
0?
b0 !
b0 +
b0 2
0=
0;
09
07
b0 "
b0 ,
b0 3
05
b0 .
b0 0
b0 E
0$
b0 '
b0 *
b0 D
0&
1%
1(
1)
#3
1B
b1 #
b1 -
b1 /
b1 1
b1 .
b1 0
b1 E
1$
0)
#4
0$
#5
1@
0B
b10 #
b10 -
b10 /
b10 1
b1 !
b1 +
b1 2
1C
b10 .
b10 0
b10 E
1$
#6
0$
#7
1B
b11 #
b11 -
b11 /
b11 1
1A
b10 !
b10 +
b10 2
0C
b11 .
b11 0
b11 E
1$
#8
0$
b11 '
b11 *
b11 D
#9
1>
0@
0B
b100 #
b100 -
b100 /
b100 1
b11 !
b11 +
b11 2
1C
b100 .
b100 0
b100 E
1$
#10
0$
#11
1?
0A
b100 !
b100 +
b100 2
0C
0>
1@
1B
b11 #
b11 -
b11 /
b11 1
b11 .
b11 0
b11 E
1$
1&
#12
0$
#13
1C
1A
b11 !
b11 +
b11 2
0?
b11 .
b11 0
b11 E
1$
#14
0$
#15
b11 .
b11 0
b11 E
1$
#16
0$
0&
#17
1>
0@
0B
b100 #
b100 -
b100 /
b100 1
b100 .
b100 0
b100 E
1$
#18
0$
#19
1B
b101 #
b101 -
b101 /
b101 1
1?
0A
b100 !
b100 +
b100 2
0C
b101 .
b101 0
b101 E
1$
#20
0$
#21
1@
0B
b110 #
b110 -
b110 /
b110 1
b110 .
b110 0
b110 E
1$
0%
#22
0$
#23
1B
b111 #
b111 -
b111 /
b111 1
b111 .
b111 0
b111 E
1$
#24
0$
#25
1$
0(
#26
0$
#27
1$
#28
1A
b111 !
b111 +
b111 2
1C
0$
1%
#29
1$
#30
0$
#31
1$
#32
0$
#33
0>
0@
0B
b0 #
b0 -
b0 /
b0 1
0C
0A
b0 !
b0 +
b0 2
0?
b0 .
b0 0
b0 E
1$
1)
#34
0$
#35
1$
#36
0$
#37
1B
b1 #
b1 -
b1 /
b1 1
b1 .
b1 0
b1 E
1$
b10100001 '
b10100001 *
b10100001 D
1(
0)
#38
14
16
18
1:
0B
b11110000 #
b11110000 -
b11110000 /
b11110000 1
b10100001 .
b10100001 0
b10100001 E
0$
1&
#39
1B
b11110001 #
b11110001 -
b11110001 /
b11110001 1
1;
19
17
b1111 "
b1111 ,
b1111 3
15
b10100010 .
b10100010 0
b10100010 E
1$
0&
#40
0$
#41
1@
0B
b11110010 #
b11110010 -
b11110010 /
b11110010 1
b1 !
b1 +
b1 2
1C
b10100011 .
b10100011 0
b10100011 E
1$
#42
0$
#43
1B
b11110011 #
b11110011 -
b11110011 /
b11110011 1
0C
b10 !
b10 +
b10 2
1A
b10100100 .
b10100100 0
b10100100 E
1$
#44
0$
#45
1>
0@
0B
b11110100 #
b11110100 -
b11110100 /
b11110100 1
b11 !
b11 +
b11 2
1C
b10100101 .
b10100101 0
b10100101 E
1$
